import PDFDocument from 'pdfkit';

interface AnalysisData {
  id: number;
  tender_title: string;
  tender_reference: string;
  feasibility_score: number;
  confidence: number;
  summary: string;
  evidence: string;
  created_at: string;
}

interface RuleResult {
  id: number;
  rule_name: string;
  rule_description: string;
  matched: boolean;
  score: number;
  evidence: string;
}

export async function generatePDF(
  analysis: AnalysisData,
  ruleResults: RuleResult[]
): Promise<Buffer> {
  return new Promise((resolve, reject) => {
    const doc = new PDFDocument({ margin: 50, size: 'A4' });
    const chunks: Buffer[] = [];

    doc.on('data', chunk => chunks.push(chunk));
    doc.on('end', () => resolve(Buffer.concat(chunks)));
    doc.on('error', reject);

    // Header
    doc
      .fontSize(24)
      .font('Helvetica-Bold')
      .text('Tender Feasibility Analysis', { align: 'center' });

    doc.moveDown();

    // Tender info
    doc.fontSize(12).font('Helvetica-Bold').text('Tender Information', { underline: true });
    doc.moveDown(0.5);

    doc.fontSize(10).font('Helvetica');
    doc.text(`Title: ${analysis.tender_title}`);
    doc.text(`Reference: ${analysis.tender_reference || 'N/A'}`);
    doc.text(`Analysis Date: ${new Date(analysis.created_at).toLocaleDateString()}`);

    doc.moveDown();

    // Feasibility score
    doc.fontSize(12).font('Helvetica-Bold').text('Feasibility Score', { underline: true });
    doc.moveDown(0.5);

    const score = analysis.feasibility_score;
    const scoreColor = score >= 70 ? 'green' : score >= 40 ? 'orange' : 'red';

    doc
      .fontSize(32)
      .fillColor(scoreColor)
      .text(`${score.toFixed(1)}%`, { align: 'center' });

    doc.fillColor('black');
    doc
      .fontSize(10)
      .text(`Confidence: ${analysis.confidence}%`, { align: 'center' });

    doc.moveDown();

    // Summary
    doc.fontSize(12).font('Helvetica-Bold').text('Summary', { underline: true });
    doc.moveDown(0.5);
    doc.fontSize(10).font('Helvetica').text(analysis.summary);

    doc.moveDown();

    // Rule results
    doc.fontSize(12).font('Helvetica-Bold').text('Rule Analysis', { underline: true });
    doc.moveDown(0.5);

    ruleResults.forEach((result, index) => {
      const status = result.matched ? '✓' : '✗';
      const statusColor = result.matched ? 'green' : 'red';

      doc.fontSize(10).font('Helvetica-Bold');
      doc.fillColor(statusColor).text(`${status} `, { continued: true });
      doc.fillColor('black').text(`${result.rule_name} (Score: ${result.score.toFixed(1)})`);

      if (result.evidence) {
        doc.fontSize(9).font('Helvetica').text(`   Evidence: ${result.evidence}`);
      }

      if (index < ruleResults.length - 1) {
        doc.moveDown(0.5);
      }
    });

    doc.moveDown();

    // Footer
    doc
      .fontSize(8)
      .font('Helvetica')
      .text('Generated by Bandinator', 50, doc.page.height - 50, {
        align: 'center',
      });

    doc.end();
  });
}
